// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.3.0.0
//      SpecFlow Generator Version:3.1.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace EstateManagement.IntegrationTests.Estate
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.3.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Xunit.TraitAttribute("Category", "base")]
    [Xunit.TraitAttribute("Category", "shared")]
    public partial class EstateFeature : object, Xunit.IClassFixture<EstateFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = new string[] {
                "base",
                "shared"};
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "Estate.feature"
#line hidden
        
        public EstateFeature(EstateFeature.FixtureData fixtureData, EstateManagement_IntegrationTests_XUnitAssemblyFixture assemblyFixture, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Estate", null, ProgrammingLanguage.CSharp, new string[] {
                        "base",
                        "shared"});
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 4
#line hidden
            TechTalk.SpecFlow.Table table29 = new TechTalk.SpecFlow.Table(new string[] {
                        "RoleName"});
            table29.AddRow(new string[] {
                        "Estate"});
#line 5
 testRunner.Given("the following security roles exist", ((string)(null)), table29, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table30 = new TechTalk.SpecFlow.Table(new string[] {
                        "ResourceName",
                        "DisplayName",
                        "Secret",
                        "Scopes",
                        "UserClaims"});
            table30.AddRow(new string[] {
                        "estateManagement",
                        "Estate Managememt REST",
                        "Secret1",
                        "estateManagement",
                        "MerchantId, EstateId, role"});
#line 9
 testRunner.Given("the following api resources exist", ((string)(null)), table30, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table31 = new TechTalk.SpecFlow.Table(new string[] {
                        "ClientId",
                        "ClientName",
                        "Secret",
                        "AllowedScopes",
                        "AllowedGrantTypes"});
            table31.AddRow(new string[] {
                        "serviceClient",
                        "Service Client",
                        "Secret1",
                        "estateManagement",
                        "client_credentials"});
            table31.AddRow(new string[] {
                        "estateClient",
                        "Estate Client",
                        "Secret1",
                        "estateManagement",
                        "password"});
#line 13
 testRunner.Given("the following clients exist", ((string)(null)), table31, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table32 = new TechTalk.SpecFlow.Table(new string[] {
                        "ClientId"});
            table32.AddRow(new string[] {
                        "serviceClient"});
#line 18
 testRunner.Given("I have a token to access the estate management resource", ((string)(null)), table32, "Given ");
#line hidden
        }
        
        void System.IDisposable.Dispose()
        {
            this.TestTearDown();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Create Estate")]
        [Xunit.TraitAttribute("FeatureTitle", "Estate")]
        [Xunit.TraitAttribute("Description", "Create Estate")]
        public virtual void CreateEstate()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create Estate", null, tagsOfScenario, argumentsOfScenario);
#line 22
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table33 = new TechTalk.SpecFlow.Table(new string[] {
                            "EstateName"});
                table33.AddRow(new string[] {
                            "Test Estate 1"});
#line 24
 testRunner.When("I create the following estates", ((string)(null)), table33, "When ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Create Operator")]
        [Xunit.TraitAttribute("FeatureTitle", "Estate")]
        [Xunit.TraitAttribute("Description", "Create Operator")]
        public virtual void CreateOperator()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create Operator", null, tagsOfScenario, argumentsOfScenario);
#line 28
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table34 = new TechTalk.SpecFlow.Table(new string[] {
                            "EstateName"});
                table34.AddRow(new string[] {
                            "Test Estate 1"});
#line 29
 testRunner.Given("I have created the following estates", ((string)(null)), table34, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table35 = new TechTalk.SpecFlow.Table(new string[] {
                            "EstateName",
                            "OperatorName",
                            "RequireCustomMerchantNumber",
                            "RequireCustomTerminalNumber"});
                table35.AddRow(new string[] {
                            "Test Estate 1",
                            "Test Operator 1",
                            "True",
                            "True"});
#line 33
 testRunner.When("I create the following operators", ((string)(null)), table35, "When ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Create Security User")]
        [Xunit.TraitAttribute("FeatureTitle", "Estate")]
        [Xunit.TraitAttribute("Description", "Create Security User")]
        public virtual void CreateSecurityUser()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create Security User", null, tagsOfScenario, argumentsOfScenario);
#line 37
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table36 = new TechTalk.SpecFlow.Table(new string[] {
                            "EstateName"});
                table36.AddRow(new string[] {
                            "Test Estate 1"});
#line 38
 testRunner.Given("I have created the following estates", ((string)(null)), table36, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table37 = new TechTalk.SpecFlow.Table(new string[] {
                            "EmailAddress",
                            "Password",
                            "GivenName",
                            "FamilyName",
                            "EstateName"});
                table37.AddRow(new string[] {
                            "estateuser1@testestate1.co.uk",
                            "123456",
                            "TestEstate",
                            "User1",
                            "Test Estate 1"});
#line 41
 testRunner.When("I create the following security users", ((string)(null)), table37, "When ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Get Estate - System Login")]
        [Xunit.TraitAttribute("FeatureTitle", "Estate")]
        [Xunit.TraitAttribute("Description", "Get Estate - System Login")]
        [Xunit.TraitAttribute("Category", "PRTest")]
        public virtual void GetEstate_SystemLogin()
        {
            string[] tagsOfScenario = new string[] {
                    "PRTest"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get Estate - System Login", null, tagsOfScenario, argumentsOfScenario);
#line 46
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table38 = new TechTalk.SpecFlow.Table(new string[] {
                            "EstateName"});
                table38.AddRow(new string[] {
                            "Test Estate 1"});
#line 47
 testRunner.Given("I have created the following estates", ((string)(null)), table38, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table39 = new TechTalk.SpecFlow.Table(new string[] {
                            "EstateName",
                            "OperatorName",
                            "RequireCustomMerchantNumber",
                            "RequireCustomTerminalNumber"});
                table39.AddRow(new string[] {
                            "Test Estate 1",
                            "Test Operator 1",
                            "True",
                            "True"});
                table39.AddRow(new string[] {
                            "Test Estate 1",
                            "Test Operator 2",
                            "True",
                            "True"});
#line 50
 testRunner.And("I have created the following operators", ((string)(null)), table39, "And ");
#line hidden
                TechTalk.SpecFlow.Table table40 = new TechTalk.SpecFlow.Table(new string[] {
                            "EmailAddress",
                            "Password",
                            "GivenName",
                            "FamilyName",
                            "EstateName"});
                table40.AddRow(new string[] {
                            "estateuser1@testestate1.co.uk",
                            "123456",
                            "TestEstate",
                            "User1",
                            "Test Estate 1"});
                table40.AddRow(new string[] {
                            "estateuser2@testestate1.co.uk",
                            "123456",
                            "TestEstate",
                            "User2",
                            "Test Estate 1"});
#line 54
 testRunner.And("I have created the following security users", ((string)(null)), table40, "And ");
#line hidden
                TechTalk.SpecFlow.Table table41 = new TechTalk.SpecFlow.Table(new string[] {
                            "EstateName"});
                table41.AddRow(new string[] {
                            "Test Estate 1"});
#line 58
 testRunner.When("I get the estate \"Test Estate 1\" the estate details are returned as follows", ((string)(null)), table41, "When ");
#line hidden
                TechTalk.SpecFlow.Table table42 = new TechTalk.SpecFlow.Table(new string[] {
                            "OperatorName"});
                table42.AddRow(new string[] {
                            "Test Operator 1"});
                table42.AddRow(new string[] {
                            "Test Operator 2"});
#line 61
 testRunner.When("I get the estate \"Test Estate 1\" the estate operator details are returned as foll" +
                        "ows", ((string)(null)), table42, "When ");
#line hidden
                TechTalk.SpecFlow.Table table43 = new TechTalk.SpecFlow.Table(new string[] {
                            "EmailAddress"});
                table43.AddRow(new string[] {
                            "estateuser1@testestate1.co.uk"});
                table43.AddRow(new string[] {
                            "estateuser2@testestate1.co.uk"});
#line 65
 testRunner.When("I get the estate \"Test Estate 1\" the estate security user details are returned as" +
                        " follows", ((string)(null)), table43, "When ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Get Estate - Estate user")]
        [Xunit.TraitAttribute("FeatureTitle", "Estate")]
        [Xunit.TraitAttribute("Description", "Get Estate - Estate user")]
        [Xunit.TraitAttribute("Category", "PRTest")]
        public virtual void GetEstate_EstateUser()
        {
            string[] tagsOfScenario = new string[] {
                    "PRTest"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get Estate - Estate user", null, tagsOfScenario, argumentsOfScenario);
#line 71
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table44 = new TechTalk.SpecFlow.Table(new string[] {
                            "EstateName"});
                table44.AddRow(new string[] {
                            "Test Estate 1"});
#line 72
 testRunner.Given("I have created the following estates", ((string)(null)), table44, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table45 = new TechTalk.SpecFlow.Table(new string[] {
                            "EstateName",
                            "OperatorName",
                            "RequireCustomMerchantNumber",
                            "RequireCustomTerminalNumber"});
                table45.AddRow(new string[] {
                            "Test Estate 1",
                            "Test Operator 1",
                            "True",
                            "True"});
                table45.AddRow(new string[] {
                            "Test Estate 1",
                            "Test Operator 2",
                            "True",
                            "True"});
#line 75
 testRunner.And("I have created the following operators", ((string)(null)), table45, "And ");
#line hidden
                TechTalk.SpecFlow.Table table46 = new TechTalk.SpecFlow.Table(new string[] {
                            "EmailAddress",
                            "Password",
                            "GivenName",
                            "FamilyName",
                            "EstateName"});
                table46.AddRow(new string[] {
                            "estateuser1@testestate1.co.uk",
                            "123456",
                            "TestEstate",
                            "User1",
                            "Test Estate 1"});
                table46.AddRow(new string[] {
                            "estateuser2@testestate1.co.uk",
                            "123456",
                            "TestEstate",
                            "User2",
                            "Test Estate 1"});
#line 79
 testRunner.And("I have created the following security users", ((string)(null)), table46, "And ");
#line hidden
#line 83
 testRunner.And("I am logged in as \"estateuser1@testestate1.co.uk\" with password \"123456\" for Esta" +
                        "te \"Test Estate 1\" with client \"estateClient\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table47 = new TechTalk.SpecFlow.Table(new string[] {
                            "EstateName"});
                table47.AddRow(new string[] {
                            "Test Estate 1"});
#line 84
 testRunner.When("I get the estate \"Test Estate 1\" the estate details are returned as follows", ((string)(null)), table47, "When ");
#line hidden
                TechTalk.SpecFlow.Table table48 = new TechTalk.SpecFlow.Table(new string[] {
                            "OperatorName"});
                table48.AddRow(new string[] {
                            "Test Operator 1"});
                table48.AddRow(new string[] {
                            "Test Operator 2"});
#line 87
 testRunner.When("I get the estate \"Test Estate 1\" the estate operator details are returned as foll" +
                        "ows", ((string)(null)), table48, "When ");
#line hidden
                TechTalk.SpecFlow.Table table49 = new TechTalk.SpecFlow.Table(new string[] {
                            "EmailAddress"});
                table49.AddRow(new string[] {
                            "estateuser1@testestate1.co.uk"});
                table49.AddRow(new string[] {
                            "estateuser2@testestate1.co.uk"});
#line 91
 testRunner.When("I get the estate \"Test Estate 1\" the estate security user details are returned as" +
                        " follows", ((string)(null)), table49, "When ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.3.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                EstateFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                EstateFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
