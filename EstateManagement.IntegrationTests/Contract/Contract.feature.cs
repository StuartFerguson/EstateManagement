// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.3.0.0
//      SpecFlow Generator Version:3.1.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace EstateManagement.IntegrationTests.Contract
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.3.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Xunit.TraitAttribute("Category", "base")]
    [Xunit.TraitAttribute("Category", "shared")]
    public partial class ContractFeature : object, Xunit.IClassFixture<ContractFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = new string[] {
                "base",
                "shared"};
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "Contract.feature"
#line hidden
        
        public ContractFeature(ContractFeature.FixtureData fixtureData, EstateManagement_IntegrationTests_XUnitAssemblyFixture assemblyFixture, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Contract", null, ProgrammingLanguage.CSharp, new string[] {
                        "base",
                        "shared"});
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 4
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "RoleName"});
            table1.AddRow(new string[] {
                        "Estate"});
#line 5
 testRunner.Given("the following security roles exist", ((string)(null)), table1, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "ResourceName",
                        "DisplayName",
                        "Secret",
                        "Scopes",
                        "UserClaims"});
            table2.AddRow(new string[] {
                        "estateManagement",
                        "Estate Managememt REST",
                        "Secret1",
                        "estateManagement",
                        "MerchantId, EstateId, role"});
#line 9
 testRunner.Given("the following api resources exist", ((string)(null)), table2, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "ClientId",
                        "ClientName",
                        "Secret",
                        "AllowedScopes",
                        "AllowedGrantTypes"});
            table3.AddRow(new string[] {
                        "serviceClient",
                        "Service Client",
                        "Secret1",
                        "estateManagement",
                        "client_credentials"});
            table3.AddRow(new string[] {
                        "estateClient",
                        "Estate Client",
                        "Secret1",
                        "estateManagement",
                        "password"});
#line 13
 testRunner.Given("the following clients exist", ((string)(null)), table3, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "ClientId"});
            table4.AddRow(new string[] {
                        "serviceClient"});
#line 18
 testRunner.Given("I have a token to access the estate management resource", ((string)(null)), table4, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "EstateName"});
            table5.AddRow(new string[] {
                        "Test Estate 1"});
            table5.AddRow(new string[] {
                        "Test Estate 2"});
#line 22
 testRunner.Given("I have created the following estates", ((string)(null)), table5, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "EstateName",
                        "OperatorName",
                        "RequireCustomMerchantNumber",
                        "RequireCustomTerminalNumber"});
            table6.AddRow(new string[] {
                        "Test Estate 1",
                        "Test Operator 1",
                        "True",
                        "True"});
            table6.AddRow(new string[] {
                        "Test Estate 2",
                        "Test Operator 1",
                        "True",
                        "True"});
#line 27
 testRunner.Given("I have created the following operators", ((string)(null)), table6, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                        "EmailAddress",
                        "Password",
                        "GivenName",
                        "FamilyName",
                        "EstateName"});
            table7.AddRow(new string[] {
                        "estateuser1@testestate1.co.uk",
                        "123456",
                        "TestEstate",
                        "User1",
                        "Test Estate 1"});
            table7.AddRow(new string[] {
                        "estateuser1@testestate2.co.uk",
                        "123456",
                        "TestEstate",
                        "User1",
                        "Test Estate 2"});
#line 32
 testRunner.Given("I have created the following security users", ((string)(null)), table7, "Given ");
#line hidden
        }
        
        void System.IDisposable.Dispose()
        {
            this.TestTearDown();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Create Contract")]
        [Xunit.TraitAttribute("FeatureTitle", "Contract")]
        [Xunit.TraitAttribute("Description", "Create Contract")]
        [Xunit.TraitAttribute("Category", "PRTest")]
        public virtual void CreateContract()
        {
            string[] tagsOfScenario = new string[] {
                    "PRTest"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create Contract", null, tagsOfScenario, argumentsOfScenario);
#line 38
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                            "EstateName",
                            "OperatorName",
                            "ContractDescription"});
                table8.AddRow(new string[] {
                            "Test Estate 1",
                            "Test Operator 1",
                            "Operator 1 Contract"});
                table8.AddRow(new string[] {
                            "Test Estate 2",
                            "Test Operator 1",
                            "Operator 1 Contract"});
#line 39
 testRunner.Given("I create a contract with the following values", ((string)(null)), table8, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                            "EstateName",
                            "OperatorName",
                            "ContractDescription",
                            "ProductName",
                            "DisplayText",
                            "Value"});
                table9.AddRow(new string[] {
                            "Test Estate 1",
                            "Test Operator 1",
                            "Operator 1 Contract",
                            "100 KES Topup",
                            "100 KES",
                            "100.00"});
                table9.AddRow(new string[] {
                            "Test Estate 1",
                            "Test Operator 1",
                            "Operator 1 Contract",
                            "Variable Topup",
                            "Custom",
                            ""});
                table9.AddRow(new string[] {
                            "Test Estate 2",
                            "Test Operator 1",
                            "Operator 1 Contract",
                            "100 KES Topup",
                            "100 KES",
                            "100.00"});
                table9.AddRow(new string[] {
                            "Test Estate 2",
                            "Test Operator 1",
                            "Operator 1 Contract",
                            "Variable Topup",
                            "Custom",
                            ""});
#line 44
 testRunner.When("I create the following Products", ((string)(null)), table9, "When ");
#line hidden
                TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                            "EstateName",
                            "OperatorName",
                            "ContractDescription",
                            "ProductName",
                            "CalculationType",
                            "FeeType",
                            "FeeDescription",
                            "Value"});
                table10.AddRow(new string[] {
                            "Test Estate 1",
                            "Test Operator 1",
                            "Operator 1 Contract",
                            "100 KES Topup",
                            "Fixed",
                            "Merchant",
                            "Merchant Commission",
                            "2.00"});
                table10.AddRow(new string[] {
                            "Test Estate 1",
                            "Test Operator 1",
                            "Operator 1 Contract",
                            "Variable Topup",
                            "Fixed",
                            "Merchant",
                            "Merchant Commission",
                            "2.00"});
                table10.AddRow(new string[] {
                            "Test Estate 2",
                            "Test Operator 1",
                            "Operator 1 Contract",
                            "100 KES Topup",
                            "Percentage",
                            "Merchant",
                            "Merchant Commission",
                            "0.75"});
                table10.AddRow(new string[] {
                            "Test Estate 2",
                            "Test Operator 1",
                            "Operator 1 Contract",
                            "Variable Topup",
                            "Percentage",
                            "Merchant",
                            "Merchant Commission",
                            "0.75"});
#line 51
 testRunner.When("I add the following Transaction Fees", ((string)(null)), table10, "When ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Get Transaction Fees for a Product")]
        [Xunit.TraitAttribute("FeatureTitle", "Contract")]
        [Xunit.TraitAttribute("Description", "Get Transaction Fees for a Product")]
        public virtual void GetTransactionFeesForAProduct()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get Transaction Fees for a Product", null, tagsOfScenario, argumentsOfScenario);
#line 58
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table11 = new TechTalk.SpecFlow.Table(new string[] {
                            "EstateName",
                            "OperatorName",
                            "ContractDescription"});
                table11.AddRow(new string[] {
                            "Test Estate 1",
                            "Test Operator 1",
                            "Operator 1 Contract"});
                table11.AddRow(new string[] {
                            "Test Estate 2",
                            "Test Operator 1",
                            "Operator 1 Contract"});
#line 60
 testRunner.Given("I create a contract with the following values", ((string)(null)), table11, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table12 = new TechTalk.SpecFlow.Table(new string[] {
                            "EstateName",
                            "OperatorName",
                            "ContractDescription",
                            "ProductName",
                            "DisplayText",
                            "Value"});
                table12.AddRow(new string[] {
                            "Test Estate 1",
                            "Test Operator 1",
                            "Operator 1 Contract",
                            "100 KES Topup",
                            "100 KES",
                            "100.00"});
                table12.AddRow(new string[] {
                            "Test Estate 1",
                            "Test Operator 1",
                            "Operator 1 Contract",
                            "Variable Topup",
                            "Custom",
                            ""});
                table12.AddRow(new string[] {
                            "Test Estate 2",
                            "Test Operator 1",
                            "Operator 1 Contract",
                            "100 KES Topup",
                            "100 KES",
                            "100.00"});
                table12.AddRow(new string[] {
                            "Test Estate 2",
                            "Test Operator 1",
                            "Operator 1 Contract",
                            "Variable Topup",
                            "Custom",
                            ""});
#line 65
 testRunner.When("I create the following Products", ((string)(null)), table12, "When ");
#line hidden
                TechTalk.SpecFlow.Table table13 = new TechTalk.SpecFlow.Table(new string[] {
                            "EstateName",
                            "OperatorName",
                            "ContractDescription",
                            "ProductName",
                            "CalculationType",
                            "FeeType",
                            "FeeDescription",
                            "Value"});
                table13.AddRow(new string[] {
                            "Test Estate 1",
                            "Test Operator 1",
                            "Operator 1 Contract",
                            "100 KES Topup",
                            "Fixed",
                            "Merchant",
                            "Merchant Commission",
                            "2.00"});
                table13.AddRow(new string[] {
                            "Test Estate 1",
                            "Test Operator 1",
                            "Operator 1 Contract",
                            "100 KES Topup",
                            "Percentage",
                            "Merchant",
                            "Merchant Commission",
                            "0.025"});
                table13.AddRow(new string[] {
                            "Test Estate 1",
                            "Test Operator 1",
                            "Operator 1 Contract",
                            "Variable Topup",
                            "Fixed",
                            "Merchant",
                            "Merchant Commission",
                            "2.50"});
                table13.AddRow(new string[] {
                            "Test Estate 2",
                            "Test Operator 1",
                            "Operator 1 Contract",
                            "100 KES Topup",
                            "Percentage",
                            "Merchant",
                            "Merchant Commission",
                            "0.85"});
                table13.AddRow(new string[] {
                            "Test Estate 2",
                            "Test Operator 1",
                            "Operator 1 Contract",
                            "Variable Topup",
                            "Percentage",
                            "Merchant",
                            "Merchant Commission",
                            "0.85"});
#line 72
 testRunner.When("I add the following Transaction Fees", ((string)(null)), table13, "When ");
#line hidden
                TechTalk.SpecFlow.Table table14 = new TechTalk.SpecFlow.Table(new string[] {
                            "CalculationType",
                            "FeeDescription",
                            "Value",
                            "FeeType"});
                table14.AddRow(new string[] {
                            "Fixed",
                            "Merchant Commission",
                            "2.00",
                            "Merchant"});
                table14.AddRow(new string[] {
                            "Percentage",
                            "Merchant Commission",
                            "0.025",
                            "Merchant"});
#line 80
 testRunner.Then("I get the Transaction Fees for \'100 KES Topup\' on the \'Operator 1 Contract\' contr" +
                        "act for \'Test Estate 1\' the following fees are returned", ((string)(null)), table14, "Then ");
#line hidden
                TechTalk.SpecFlow.Table table15 = new TechTalk.SpecFlow.Table(new string[] {
                            "CalculationType",
                            "FeeDescription",
                            "Value",
                            "FeeType"});
                table15.AddRow(new string[] {
                            "Fixed",
                            "Merchant Commission",
                            "2.50",
                            "Merchant"});
#line 85
 testRunner.Then("I get the Transaction Fees for \'Variable Topup\' on the \'Operator 1 Contract\' cont" +
                        "ract for \'Test Estate 1\' the following fees are returned", ((string)(null)), table15, "Then ");
#line hidden
                TechTalk.SpecFlow.Table table16 = new TechTalk.SpecFlow.Table(new string[] {
                            "CalculationType",
                            "FeeDescription",
                            "Value",
                            "FeeType"});
                table16.AddRow(new string[] {
                            "Percentage",
                            "Merchant Commission",
                            "0.85",
                            "Merchant"});
#line 89
 testRunner.Then("I get the Transaction Fees for \'100 KES Topup\' on the \'Operator 1 Contract\' contr" +
                        "act for \'Test Estate 2\' the following fees are returned", ((string)(null)), table16, "Then ");
#line hidden
                TechTalk.SpecFlow.Table table17 = new TechTalk.SpecFlow.Table(new string[] {
                            "CalculationType",
                            "FeeDescription",
                            "Value",
                            "FeeType"});
                table17.AddRow(new string[] {
                            "Percentage",
                            "Merchant Commission",
                            "0.85",
                            "Merchant"});
#line 93
 testRunner.Then("I get the Transaction Fees for \'Variable Topup\' on the \'Operator 1 Contract\' cont" +
                        "ract for \'Test Estate 2\' the following fees are returned", ((string)(null)), table17, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Get Merchant Contracts")]
        [Xunit.TraitAttribute("FeatureTitle", "Contract")]
        [Xunit.TraitAttribute("Description", "Get Merchant Contracts")]
        public virtual void GetMerchantContracts()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get Merchant Contracts", null, tagsOfScenario, argumentsOfScenario);
#line 97
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table18 = new TechTalk.SpecFlow.Table(new string[] {
                            "MerchantName",
                            "AddressLine1",
                            "Town",
                            "Region",
                            "Country",
                            "ContactName",
                            "EmailAddress",
                            "EstateName"});
                table18.AddRow(new string[] {
                            "Test Merchant 1",
                            "Address Line 1",
                            "TestTown",
                            "Test Region",
                            "United Kingdom",
                            "Test Contact 1",
                            "testcontact1@merchant1.co.uk",
                            "Test Estate 1"});
                table18.AddRow(new string[] {
                            "Test Merchant 2",
                            "Address Line 1",
                            "TestTown",
                            "Test Region",
                            "United Kingdom",
                            "Test Contact 1",
                            "testcontact1@merchant2.co.uk",
                            "Test Estate 2"});
#line 99
 testRunner.Given("I create the following merchants", ((string)(null)), table18, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table19 = new TechTalk.SpecFlow.Table(new string[] {
                            "EstateName",
                            "OperatorName",
                            "ContractDescription"});
                table19.AddRow(new string[] {
                            "Test Estate 1",
                            "Test Operator 1",
                            "Operator 1 Contract"});
                table19.AddRow(new string[] {
                            "Test Estate 2",
                            "Test Operator 1",
                            "Operator 1 Contract"});
#line 104
 testRunner.Given("I create a contract with the following values", ((string)(null)), table19, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table20 = new TechTalk.SpecFlow.Table(new string[] {
                            "EstateName",
                            "OperatorName",
                            "ContractDescription",
                            "ProductName",
                            "DisplayText",
                            "Value"});
                table20.AddRow(new string[] {
                            "Test Estate 1",
                            "Test Operator 1",
                            "Operator 1 Contract",
                            "100 KES Topup",
                            "100 KES",
                            "100.00"});
                table20.AddRow(new string[] {
                            "Test Estate 1",
                            "Test Operator 1",
                            "Operator 1 Contract",
                            "Variable Topup",
                            "Custom",
                            ""});
                table20.AddRow(new string[] {
                            "Test Estate 2",
                            "Test Operator 1",
                            "Operator 1 Contract",
                            "100 KES Topup",
                            "100 KES",
                            "100.00"});
                table20.AddRow(new string[] {
                            "Test Estate 2",
                            "Test Operator 1",
                            "Operator 1 Contract",
                            "Variable Topup",
                            "Custom",
                            ""});
#line 109
 testRunner.When("I create the following Products", ((string)(null)), table20, "When ");
#line hidden
                TechTalk.SpecFlow.Table table21 = new TechTalk.SpecFlow.Table(new string[] {
                            "EstateName",
                            "OperatorName",
                            "ContractDescription",
                            "ProductName",
                            "CalculationType",
                            "FeeDescription",
                            "Value",
                            "FeeType"});
                table21.AddRow(new string[] {
                            "Test Estate 1",
                            "Test Operator 1",
                            "Operator 1 Contract",
                            "100 KES Topup",
                            "Fixed",
                            "Merchant Commission",
                            "2.00",
                            "Merchant"});
                table21.AddRow(new string[] {
                            "Test Estate 1",
                            "Test Operator 1",
                            "Operator 1 Contract",
                            "100 KES Topup",
                            "Percentage",
                            "Merchant Commission",
                            "0.025",
                            "Merchant"});
                table21.AddRow(new string[] {
                            "Test Estate 1",
                            "Test Operator 1",
                            "Operator 1 Contract",
                            "Variable Topup",
                            "Fixed",
                            "Merchant Commission",
                            "2.50",
                            "Merchant"});
                table21.AddRow(new string[] {
                            "Test Estate 2",
                            "Test Operator 1",
                            "Operator 1 Contract",
                            "100 KES Topup",
                            "Percentage",
                            "Merchant Commission",
                            "0.85",
                            "Merchant"});
                table21.AddRow(new string[] {
                            "Test Estate 2",
                            "Test Operator 1",
                            "Operator 1 Contract",
                            "Variable Topup",
                            "Percentage",
                            "Merchant Commission",
                            "0.85",
                            "Merchant"});
#line 116
 testRunner.When("I add the following Transaction Fees", ((string)(null)), table21, "When ");
#line hidden
                TechTalk.SpecFlow.Table table22 = new TechTalk.SpecFlow.Table(new string[] {
                            "ContractDescription",
                            "ProductName"});
                table22.AddRow(new string[] {
                            "Operator 1 Contract",
                            "100 KES Topup"});
                table22.AddRow(new string[] {
                            "Operator 1 Contract",
                            "Variable Topup"});
#line 124
 testRunner.Then("I get the Merchant Contracts for \'Test Merchant 1\' for \'Test Estate 1\' the follow" +
                        "ing contract details are returned", ((string)(null)), table22, "Then ");
#line hidden
                TechTalk.SpecFlow.Table table23 = new TechTalk.SpecFlow.Table(new string[] {
                            "ContractDescription",
                            "ProductName"});
                table23.AddRow(new string[] {
                            "Operator 1 Contract",
                            "100 KES Topup"});
                table23.AddRow(new string[] {
                            "Operator 1 Contract",
                            "Variable Topup"});
#line 129
 testRunner.Then("I get the Merchant Contracts for \'Test Merchant 2\' for \'Test Estate 2\' the follow" +
                        "ing contract details are returned", ((string)(null)), table23, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.3.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                ContractFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                ContractFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
